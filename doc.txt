>>>>>INPUT CHECKING<<<<<
1) check if they're numbers /DONE
2) check the size of int /DONE
3) check how many -- irrelevant? this will come later when sorting
4) check the duplicates /DONE

2) do I check the sizeof first? yes - it's not that difficult
and I can use it
so if sizeof int == 2 check againt these values: -32768 & 32767
if sizeof int == 4 check against these values: –2147483648 &
														2147483647
to make it even better, I could have it calculate the max values
I'd need my own pow function
buuut is it worth ittttt

3) it makes sense to put it above the other checks
remember that 1 arg is going to be the launch of the program
so if argc is 2 - then I have one arg
and also - I do not want to check the first one in the number check 
let's confirm if that's the thing with argv

yup - argv[0] is the ./ thing
so the first actual number is going to be at argv[1]

ok so I need at least 2 numbers - so at least 3 argc
do I even need to do anything tho 
then I guess it will just not sort
let's skip it for nowww 

1) second thing to confirm - the argv things are strings
so I cannot just compare them with the numbers
I have to translate them to ints first
yup - it's a char ** and it must beeee

confirmed - use atoi. refresh on atoi:
- it skips the spaces in the strings
- if it finds a - or + it calculates the sign out of it
for [-]: 44 - 45 = -1
for [+]: 44 - 43 = 1
- then we have the part that translates string into a number
if the value of the char is within those that are assigned to 
representing ints - then I calculate the number by adequatly * 10 
and subtracting the '0' which converts it into ints
and I have that in the loop 
okay 
that's covered

>>>> ATTENTION <<<<
there might be only one argument that is a number - then do nothing
if however the arg is not a number - then do the error thing
so first check the validity of the input - and then the number
or, if there's only one arg - check if it's a number

atoi returns a zero when given a zero or when the string is not numbers

also I have to load the ints to the stack, so maybe I could have it done already 
or maybe it doesnt matter
orrr since atoi is not returning anything special when there are alpha chars
maybe I should have a different checker - just a function that goes argv to argv 
and that goes through the chars of it yupp

ah also - reading the input will skip the white chars already - so I dont need to skip them

>>>>>
- I have one argument - I have to check if it's a number 
if it's not a number - return the error
but if it is one - then later, when I actually move to the sorting part, 
I do sorting only when I have more args
so at this point of input checking, it's enough

- I check if all of the arguments are numbers
if they are, I can move on to checking the sizes -
and because I've already checked if they're all number, 
(if they got to this point, then they are numbers)
then I don't have to worry about the atoi not taking care of that

but

what needs to be done now is the length of the thing
because atoi is not going to work for the longer strings

so many ways to do it!
you can have the atoli - and just save the thing in the long long and then compare
or you can compare strings
oorrr you cantake the atoi return - convert it into string againXD
and then compare to the string you were given...?

just ude strncmp - 'it does not crash' :')
ok so strncmp:
it will compare fot n bytes or until it hits the end of any string
let's put a max value in the second string 
and the string to compare as s1
then if the ret of strncmp is > 0 then it's bigger than int

and now: because I can have a - or a plus sign 
first search for it and skip if it's there
and then strncmp
for how long tho? for the strlen of the input?
and also, it will run out of n bytes

ok
if there's a minus
k++
and compare WITHIN THE IF THAT CHECKS FOR -

4) check for duplicates - how to have that efficient?
there's no way - just strncmp

 ./push_swap 11 234 –879879

 >>> it seems I finished input checking!

 >>>>FUNCTIONS FOR OPERATIONS<<<<

it would be necessary to have a function that currently displays the stack status
so I need a function that prints the values of the linked list nodes
but I only need it for now, so I can use printf

1_ load numbers to stack a /////DONE
	the first argument should be on top of a
	I need to go in the loop with the argc
	and assign the values to the content
	so it could be something similar to the printing function, but it could do a different thing
NULL ptr - when printed - 0x0

STACK b - I need stack b - it should be another linked list
stack b is getting it's elements when pb is executed
BUT IT'S GETTING ELEMENTS in a different order. 
pa and pb are putting elements to the front of the list

2_ sa - swap a /////DONE
takes stack a 
swaps two top elements - so the two elements that are first
if there's no elements or only one element - do nothing
use lstsize to check if I swap - it needs to return at least two

3_ sb - swap b /////DONE
same as swap b but it takes stack b
4_ ss - swap a and b at the same time ////DONE
this just needs to take two different stacks and pass accordingly

5_ pa - push a /////DONE
take element from on top of b and put it on top of a
do nothing if b is empty
so the function takes two heads
and checks the things
and does the thing
aaandd you could make it universal - and put either a first or b first
from - take the first element
so it's *head_from
I have to create a new node for stack b? no - I just have to repoint things

ok since what I need to repoint changes depending on the amount of elements in the stack
so again - use the lstsize ON BOTH stacks
they will not be both empty ever
I will have at least two elements in total
so if there's 1 el in the to/from
then there's also at least one in to/from

if stack_to is empty
	[ temp = head_from ]
	[ head_from = el1(of stack from)->next ]
	[ head_to = temp ]

{if stack_from has 1 element
	[ el(of stack from)->next = head_to ]
	[ head_to = head_from ]
	[ head_from = NULL ]}

if stack_from has more than 1 element and stack_to has at least one
	[ temp = head_from ]
	[ head_from = el1(of stack from)->next ]
	[ el1(of stack from)->next = head_to ]
	[ head_to = temp ]

ok it turned out it can work for both 
so umm there's no longer need to check if from has 1 element
basically two scenarios: when the operation happens: stack to is empty 
or it's not empty 
and there's no pushing if stack from is empty

HAHAHA
in the end it just works for all with the same thing

6_ pb - push b //////DONE
just pass stacks in different order - first pass head_b

7_ ra - rotate a //////DONE

[temp = *head]
[*head = el1->next]
[el1->next = last->next]
[last->next = temp]

8_ rb - rotate b ///////DONE
just pass a head to b
9_ rr - rotate a and b at the same time ////DONE
pass both and put both inside
10_ rra - reverse rotate a

for these I need a function that finds me a one before the last el
got it

[ temp = *head ]
[ *head = 1b4last->next ]
[ 1b4last->next = last->next ]
[ last->next = temp ]

11_ rrb - reverse rotate b
12_ rrr - reverse rotate both a and b

all DONE

<<<<< ALGORITHM >>>>>

radix sort
..........
	using counting sort over and over

	1 - give the indexes
	3 - then what bc I have my instructions and I need to only follow them
depending on where the number is, it's going to be better to use one operation or the other
find the half?
push them all to stack b in reverse order - let's start with that?
1 5 10 8 13 14 11 7 0 4 12 3 15 6 9 2

we do all this to find the starting index of the element
ok, I look at the last digit
0 1 2 3 4 5 6 7 8 9
0 0 0 0 0 0 0 0 0 0

I look for the 0's
0 1 2 3 4 5 6 7 8 9
2 0 0 0 0 0 0 0 0 0

I look for the 1's
0 1 2 3 4 5 6 7 8 9
2 2 0 0 0 0 0 0 0 0

I look for 2's
0 1 2 3 4 5 6 7 8 9
2 2 2 0 0 0 0 0 0 0

for the 3s
0 1 2 3 4 5 6 7 8 9
2 2 2 2 0 0 0 0 0 0

for the 4s
0 1 2 3 4 5 6 7 8 9
2 2 2 2 2 0 0 0 0 0

for the 5s
0 1 2 3 4 5 6 7 8 9
2 2 2 2 2 2 0 0 0 0

for the sixes
0 1 2 3 4 5 6 7 8 9
2 2 2 2 2 2 1 0 0 0

for the 7s
0 1 2 3 4 5 6 7 8 9
2 2 2 2 2 2 1 1 0 0

for the 8s
0 1 2 3 4 5 6 7 8 9
2 2 2 2 2 2 1 1 1 0

for the 9s
0 1 2 3 4 5 6 7 8 9
2 2 2 2 2 2 1 1 1 1

and now that I have these values, I have to move them to pb in the correct order
now we have to add each number to the right accumulitavely
so 

0 1 2 3  4  5  6  7  8  9
2 4 6 8 10 12 13 14 15 16 - x amount of numbers

now we have to shift this to the right
starting with the last index
0 1 2 3 4  5  6  7  8  9
0 2 4 6 8 10 12 13 14 15 - i for index

so now, if a index number has a 9 in the last digit place
I put it accordingly
0 1 2 3 4 5 6 7 8 9 - d for digit

if has a d - put x amount at the ith position
	if has a zero - put 2 at the beginning
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0
	if has a (1) - put 2 in the arr[2]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11
	if has a (2) - put 2 in the arr[4]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2
	if has a (3) - put 2 in the arr[6]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2 13  3 
	if has a (4) - put 2 in the arr[8]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2 13  3 14  4
	if has a (5) - put 2 in the arr[10]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2 13  3 14  4   5  15
	if has a (6) - put 1 in the arr[12]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2 13  3 14  4   5  15   6 
	if has a (7) - put 1 in the arr[13]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2 13  3 14  4   5  15   6   7
	if has a (8) - put 1 in the arr[14]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2 13  3 14  4   5  15   6   7   8
	if has a (9) - put 1 in the arr[15]
	0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
	10 0  1 11 12  2 13  3 14  4   5  15   6   7   8   9

I have a new order - and I have to obtain it with the pb sa and so on
	==> I'll get there later

how do I know that the numbers are not yet sorted? I have to do it as
many times as I have digits in the highest number
so in this case - 2 times, one is already done. let's go again:
	10 0  1 11 12  2 13  3 14  4   5  15   6   7   8   9
now I look at the first digit - if there's only one digit, I put a zero
0 1 2 3 4 5 6 7 8 9
0 0 0 0 0 0 0 0 0 0

I look for the 0's
0 1 2 3 4 5 6 7 8 9
10

I look for the 1's
0  1 2 3 4 5 6 7 8 9
10 6

[....]
final: 
I look for the 1's
0  1 2 3 4 5 6 7 8 9
10 6 0 0 0 0 0 0 0 0 - the x

now I add:
0   1  2  3  4  5  6  7  8  9
10 16 16 16 16 16 16 16 16 16

now I shift:
0   1  2  3  4  5  6  7  8  9
0  10 16 16 16 16 16 16 16 16

now I fill:
put 10 zeroes in the index 0
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
0 1 2 3 4 5 6 7 8 9

put ones at index [10]
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15

that's magic....
ok, now to the difficult part - how to move them with the ops that we have
shift between a and b?

how to put accordingly - I first gather all the info
when I have it, I can move the elements
so, I am looking for the 0 in the last digit
if it's higher than half of the stack, I rotate and then push
if it's lower - I reverse rotate and push
or
I can only swap the top 2 elements
so I rotate and by doing to I already bring the next number closer
so I could have a look at the other number already when picking the
instructions

the solution to that problem is - do it on the binary 
radix works faster when there's less buckets

____ASSIGN_INDEX____
find the smallest value
give it value of i
start over
find the second smallest value

ok, I can go through the list
and each time find the smallest value
and if the smallest value already has an index
then skip
if doesnt have index - assigne the index
and repeat nahhh this will not workkkk
but - I could have the temp min
and remember the node (index)
add the index to the struct? yes

stack A for 1, stack b for 0

SESSION WITH ALISTAIR
check the size of the stack

- find the longest run, define where in the stack does it start
- each loop ends in set of operations
it will always end in pa or pb

'and then we have to figure out what to do'

ok so every iter - get the longest run
check for the min pos if it's on the top when len_longest == stack_len

the b stack has sorted numbers

check if you can push to a
size - total length of sth
check against the current stack a
or if there are still elements in stack b

when stack a is already sorted, we rra and we see if we can 
push elements from b

case: we have the longest run wrapping around some unsorted values
so we compare - where's the end of the run against the run_len

ALWAYS CHECK IF YOU CAN ADD STUFF FROM b

if the top value fits exactly before the first value - swap
otherwise push to b

push to b
stack b should be descending

simulate the scenarios - ???????
I know the situation - I know the unsorted number and i know
stack b values
how do I assess what operations I do?
ok - if it's 3 pos from the beginning - check where it fits in stack b
in the end I'm only going to push one value to stack b
so I have to check for which value it's the best to do it (the smallest amount of steps)

if the number is fitting to stack b - perf, just push
if not fitting - see how many pushes you'd have to do in b to make it fits

REMEMBER THAT NUMBER

look at the second number from the unsorted stack - add ++ to the number already
(because you have to ra or rra)
look if it fits
if it doesnt - what you'd have to do to make it fit

you can also push to b and swap

OK JUST DO THE ROTATIONS
- check if you can push the number
- if you can't push the number, check where it would fit in b
- if it is below the middle point -- rra
	if it's above the middle point -- ra
SAVE THE NUMBER OF OPS
- check if the next/previous number would fit - if yes, see how many ops
it would take you, compare with the previous one - if it's smaller,
save that
and keep going through all of the numbers - maybe save a number in struct 
that rememers to which set of instructions the smallest value belong

I could optimise the radix by not pushing if there's no more numbers that would fit
then I don't do pb and then pa - let's make it in another function

optimisation would be - before you push to b, check if there'd be anything else to push
if not - leave it
if yes - push it

it will save me literally a couple of moves... but let's try to implement that

66 is optimised
66 is not optimised :PPP

ok, the mistake is that I always check from the top
and I don't want to check the first one

OMGGG cut down to 23......

3 0 1 9 7 2 5 16 6 10 11 12 17 14 18 29 33
"3", "0", "1", "9", "7", "2", "5", "16", "6", "10", "11", "12", "17", "14", "18", "29", "33"

ok so what's wrong is in that algo - it starts pushing much earlier
LOGIC again
I put else if.....
I push things to be that do not belong there!
ok still not fully working but better
and again - logic. OR instead of AND

425 vs 
281 vs 425 whaaaatttttt

ok not understanding the bit thing correct
this is literally only equal to zero when I give it zero

ok what should I check for
if there's something in stack a that would be pushed

ok what do I need to do for the five numbers:
find the smallest
rotate ra or rra depending on where it is
push it to b
then find the second smallest - same 
and push to b